{"version":3,"sources":["../src/index.js"],"names":["_","fse","LOG_LEVEL","OFF","INFO","VERBOSE","AEMClientLibGeneratorPlugin","constructor","_options","options","logger","getInstance","logLevel","moduleVersions","assets","apply","compiler","console","log","plugin","params","info","compilation","callback","filename","verbose","context","createClientLibsDir","createClientLibs","libs","then","catch","error","err","baseDir","Promise","all","map","value","index","collection","dir","resolve","destination","name","ensureDir","isFileToBeCopied","filePath","v","length","lib"],"mappings":";;;;;;AAAA;;IAAYA,C;;AAEZ;;;;AACA;;;;AACA;;IAAYC,G;;AACZ;;;;AACA;;;;;;AAEA,IAAIC,YAAY;AACZC,OAAK,KADO,EACAC,MAAM,MADN,EACcC,SAAS;AADvB,CAAhB;;AAIe,MAAMC,2BAAN,CAAkC;;AAE/CC,cAAYC,QAAZ,EAAsB;AACpB;AACA,SAAKC,OAAL,GAAeD,QAAf;AACA,SAAKE,MAAL,GAAc,sBAAcC,WAAd,CAA0BH,SAASI,QAAnC,CAAd;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,QAAMC,QAAN,EAAgB;AAAA;;AACd,QAAIP,UAAU,KAAKA,OAAnB;;AAEAQ,YAAQC,GAAR,CAAY,SAAZ,EAAuB,KAAKR,MAA5B;;AAEAM,aAASG,MAAT,CAAgB,SAAhB,EAA2B,UAACC,MAAD,EAAY;AACrC,YAAKV,MAAL,CAAYW,IAAZ,CAAiB,4CAAjB;AACD,KAFD;;AAIAL,aAASG,MAAT,CAAgB,aAAhB,EAA+B,UAACG,WAAD,EAAiB;AAC9C,YAAKZ,MAAL,CAAYW,IAAZ,CAAiB,mDAAjB;;AAEAC,kBAAYH,MAAZ,CAAmB,UAAnB,EAA+B,YAAM;AACnC,cAAKT,MAAL,CAAYW,IAAZ,CAAiB,sDAAjB;AACD,OAFD;AAGD,KAND;;AAQAL,aAASG,MAAT,CAAgB,MAAhB,EAAwB,UAACG,WAAD,EAAcC,QAAd,EAA2B;AACjD;AACA,YAAKb,MAAL,CAAYW,IAAZ,CAAiB,kDAAjB;;AAEA,WAAK,IAAIG,QAAT,IAAqBF,YAAYR,MAAjC,EAAyC;AACvC,cAAKJ,MAAL,CAAYe,OAAZ,CAAqBD,QAArB;AACD;AACD,YAAKd,MAAL,CAAYe,OAAZ,CAAoB,+CAA+C,MAAKhB,OAAL,CAAaiB,OAAhF;AACA,UAAIC,sBAAsB,MAAKC,gBAAL,CAAsB,MAAKnB,OAAL,CAAaoB,IAAnC,EAAyC,MAAKpB,OAAL,CAAaiB,OAAtD,CAA1B;AACAC,0BAAoBG,IAApB,CAAyB,YAAM;AAC7BP;AACD,OAFD,EAEGQ,KAFH,CAES,eAAO;AACdd,gBAAQe,KAAR,CAAcC,GAAd;AACD,OAJD;AAOD,KAhBD;AAiBD;;AAEDL,mBAAiBC,IAAjB,EAAuBK,OAAvB,EAAgC;AAAA;;AAC9B,WAAOC,QAAQC,GAAR,CAAYpC,EAAEqC,GAAF,CAAMR,IAAN,EAAY,UAACS,KAAD,EAAQC,KAAR,EAAeC,UAAf,EAA8B;;AAE3D,UAAIC,MAAM,eAAKC,OAAL,CAAaR,OAAb,EAAsBI,MAAMK,WAA5B,EAAyCL,MAAMM,IAA/C,CAAV;AACA,aAAKlC,MAAL,CAAYe,OAAZ,CAAoB,yBAAyBgB,GAA7C;AACA,aAAOxC,IAAI4C,SAAJ,CAAcJ,GAAd,CAAP;AACD,KALkB,CAAZ,CAAP;AAMD;;AAEDK,mBAAiBC,QAAjB,EAA2B;AACzB,SAAK,IAAIC,IAAE,CAAX,EAAcA,IAAE,KAAKvC,OAAL,CAAaoB,IAAb,CAAkBoB,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,UAAIE,MAAM,KAAKzC,OAAL,CAAaoB,IAAb,CAAkBmB,CAAlB,CAAV;AACA,WAAK,IAAIA,IAAE,CAAX,EAAcA,IAAEE,IAAIpC,MAAJ,CAAWmC,MAA3B,EAAmCD,GAAnC,EAAwC,CAEvC;AACF;AACF;;AA9D8C,C,kBAA5B1C,2B;AAiEpB","file":"index.js","sourcesContent":["import * as _ from 'lodash';\n\nimport path from 'path';\nimport glob from 'glob';\nimport * as fse from 'fs-extra';\nimport async from 'async';\nimport { LoggerFactory } from './logger';\n\nlet LOG_LEVEL = {\n    OFF: 'off', INFO: 'info', VERBOSE: 'verbose'\n};\n\nexport default class AEMClientLibGeneratorPlugin {\n\n  constructor(_options) {\n    // Configure your plugin with options...\n    this.options = _options;\n    this.logger = LoggerFactory.getInstance(_options.logLevel);\n    this.moduleVersions = {};\n    this.assets = {};\n  }\n\n  apply(compiler) {\n    var options = this.options;\n\n    console.log('logger:', this.logger);\n    \n    compiler.plugin(\"compile\", (params) => {\n      this.logger.info(\"\\nThe compiler is starting to compile...\\n\");\n    });\n  \n    compiler.plugin(\"compilation\", (compilation) => {\n      this.logger.info(\"\\nThe compiler is starting a new compilation...\\n\");\n  \n      compilation.plugin(\"optimize\", () => {\n        this.logger.info(\"\\nThe compilation is starting to optimize files...\\n\");\n      });\n    });\n  \n    compiler.plugin(\"emit\", (compilation, callback) => {\n      // Create a header string for the generated file:\n      this.logger.info(\"\\nThe compilation is starting to emit files...\\n\");\n  \n      for (var filename in compilation.assets) {\n        this.logger.verbose( filename );\n      }\n      this.logger.verbose('now going to create directory under base: ' + this.options.context);\n      let createClientLibsDir = this.createClientLibs(this.options.libs, this.options.context);\n      createClientLibsDir.then(() => {\n        callback();\n      }).catch(err => {\n        console.error(err)\n      });\n  \n      \n    });\n  }\n\n  createClientLibs(libs, baseDir) {\n    return Promise.all(_.map(libs, (value, index, collection) => {\n      \n      var dir = path.resolve(baseDir, value.destination, value.name);\n      this.logger.verbose('Creating directory: ' + dir);\n      return fse.ensureDir(dir);\n    })); \n  }\n\n  isFileToBeCopied(filePath) {\n    for (var v=0; v<this.options.libs.length; v++) {\n      var lib = this.options.libs[v];\n      for (var v=0; v<lib.assets.length; v++) {\n        \n      }\n    }\n  }\n\n  \n};"]}